/** StarTower
 *Submitted for verification at BscScan.com on 2024-06-12
*/

//SPDX-License-Identifier: Unlicensed
pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

/**
 * @dev Wrappers over Solidity's arithmetic operations.
 *
 * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler
 * now has built in overflow checking.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}

library SafeMathInt {
    function mul(int256 a, int256 b) internal pure returns (int256) {
        // Prevent overflow when multiplying INT256_MIN with -1
        // https://github.com/RequestNetwork/requestNetwork/issues/43
        require(!(a == - 2**255 && b == -1) && !(b == - 2**255 && a == -1));

        int256 c = a * b;
        require((b == 0) || (c / b == a));
        return c;
    }

    function div(int256 a, int256 b) internal pure returns (int256) {
        // Prevent overflow when dividing INT256_MIN by -1
        // https://github.com/RequestNetwork/requestNetwork/issues/43
        require(!(a == - 2**255 && b == -1) && (b > 0));

        return a / b;
    }

    function sub(int256 a, int256 b) internal pure returns (int256) {
        require((b >= 0 && a - b <= a) || (b < 0 && a - b > a));

        return a - b;
    }

    function add(int256 a, int256 b) internal pure returns (int256) {
        int256 c = a + b;
        require((b >= 0 && c >= a) || (b < 0 && c < a));
        return c;
    }

    function toUint256Safe(int256 a) internal pure returns (uint256) {
        require(a >= 0);
        return uint256(a);
    }
}

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}

interface IRelation {
    function getInviter(address account) external view returns(address);
    function getMyTeam(address account) external view returns(address[] memory);
}

interface IStakePool {
    function sendReward(address account, uint256 amount) external ;
}

contract Main is Ownable {
    using SafeMath for uint256;
    using Address for address;

    address public relShipAddress;
    address public fundAddress;

    address public topAddress;

    IERC20 public AToken;
    IERC20 public USDTToken;

    struct Log {
        uint8 types; // 1 recommend  2 team reward 3 extract
        uint256 timestamp;
        uint256 quantity;
        address from;
        string desc;
    }
    mapping(address => Log[]) accountLogs;

    enum TYPES{
        LEVEL_ONE,
        LEVEL_TWO,
        LEVEL_THREE,
        LEVEL_FOUR,
        LEVEL_FIVE,
        LEVEL_SIX,
        LEVEL_SEVEN
    }

    mapping (TYPES => uint256) public joinRequiredAmount;
    mapping (uint8 => uint256) public distributeRate;

    uint256 public id = 1;
    struct USERINFO {
        uint256 oId;
        address account;
        uint256 amount;
        address relSuperior;
        address superior;
        address[] referrals;
        uint256 mintAmount;
        uint256 mintPaidAmount;
        uint256 lastUpdateMintTime;
        uint256 startTime;
    }
    mapping (address => mapping (TYPES => USERINFO[])) accountInfos;
    mapping (uint256 => mapping (address => uint256)) public referralsIndex;

    uint256 public mintMultiple = 1;
    uint256 public mintPeriod = 150 days;

    uint256 internal withdrawalRate = 10;
    uint256 internal sidewaysRate = 25;
    uint256 internal layer = 100;
    uint256 internal totalLevelRatio = 35;
   
    uint256 internal level7RequiredAmount = 1000000 * 10 ** 18;
    uint256 internal level7Ratio =  35;
    uint256 internal level6RequiredAmount = 80000 * 10 ** 18;
    uint256 internal level6Ratio =  30;
    uint256 internal level5RequiredAmount = 60000 * 10 ** 18;
    uint256 internal level5Ratio =  25;
    uint256 internal level4RequiredAmount = 40000 * 10 ** 18;
    uint256 internal level4Ratio =  20;
    uint256 internal level3RequiredAmount = 20000 * 10 ** 18;
    uint256 internal level3Ratio =  15;
    uint256 internal level2RequiredInviter = 3;
    uint256 internal level2Ratio =  10;

    mapping (address => uint256) public accountAchievement;
    mapping (address => uint256) public teamAchievement;

    mapping (uint8 => mapping(address => bool)) public levelInit;

    address[] timeAxisAccount;
    mapping (address => uint256) public timeAxisIndex;
    mapping (address => uint256) public timeAxisReward;

    event Widthdrawal(address indexed account, uint256 amount);
    event GetTimeAxisReard(address indexed account, uint256 amount);
    event ClaimMintReward(address indexed account, uint256 mintAmount);
    event Deposit(address indexed account, uint256 depositeAmount);

    constructor(
        address _relShipAddress,
        address _AToken,
        address _USDTToken
    ) {
        relShipAddress = _relShipAddress;
        AToken = IERC20(_AToken);
        USDTToken = IERC20(_USDTToken);
        
       distributeRate[0] = 200;
       distributeRate[1] = 200;
       distributeRate[2] = 350;
       distributeRate[3] = 50;
       distributeRate[4] = 150;
       distributeRate[5] = 50;

       joinRequiredAmount[TYPES.LEVEL_ONE] = 15 * 10 ** 18;
       joinRequiredAmount[TYPES.LEVEL_TWO] = 30 * 10 ** 18;
       joinRequiredAmount[TYPES.LEVEL_THREE] = 45 * 10 ** 18;
       joinRequiredAmount[TYPES.LEVEL_FOUR] = 60 * 10 ** 18;
       joinRequiredAmount[TYPES.LEVEL_FIVE] = 75 * 10 ** 18;
       joinRequiredAmount[TYPES.LEVEL_SIX] = 90 * 10 ** 18;
       joinRequiredAmount[TYPES.LEVEL_SEVEN] = 105 * 10 ** 18;
    }

    function initLevelData(uint8 level, address[] memory accounts, bool isLevel) external onlyOwner {
        uint256 count = accounts.length;
        for(uint i = 0; i < count; i++) {
            levelInit[level][accounts[i]] = isLevel;
        }
    }

    function setWithdrawalRate(uint256 _withdrawalRate) external onlyOwner {
        withdrawalRate =_withdrawalRate;
    }

    function setRelShipAddress(address _relShipAddress) external onlyOwner {
        relShipAddress = _relShipAddress;
    }

    function setFundAddress(address _fundAddress) external onlyOwner {
        fundAddress = _fundAddress;
    }

    function setDistributeRate(uint8 _index, uint256 _amount) external onlyOwner {
        distributeRate[_index] = _amount;
    }

    function setTopAddress(address _top) external onlyOwner {
        topAddress = _top;
        address[] memory addr;
        for(uint256 i = 0; i < 7; i++) {
            USERINFO[] storage accInfo = accountInfos[topAddress][TYPES(i)];
            accInfo.push(USERINFO(
                id,
                _top,
                0,
                address(0),
                address(0),
                addr,
                0,
                0,
                block.timestamp,
                block.timestamp
            ));
            id++;
        }
    }

    function setLevelRatio(
        uint256 lv2Ratio,
        uint256 lv3Ratio,
        uint256 lv4Ratio,
        uint256 lv5Ratio,
        uint256 lv6Ratio
    ) external onlyOwner {
        level2Ratio = lv2Ratio;
        level3Ratio = lv3Ratio;
        level4Ratio = lv4Ratio;
        level5Ratio = lv5Ratio;
        level6Ratio = lv6Ratio;
    }

    function setLevelRequiredAount(
        uint256 level2Amount,
        uint256 level3Amount,
        uint256 level4Amount,
        uint256 level5Amount,
        uint256 level6Amount,
        uint256 level7Amount
    ) external onlyOwner {
        level2RequiredInviter = level2Amount;
        level3RequiredAmount = level3Amount;
        level4RequiredAmount = level4Amount;
        level5RequiredAmount = level5Amount;
        level6RequiredAmount = level6Amount;
        level7RequiredAmount = level7Amount;
    }

    function invest(address token, address account, uint256 amount) external onlyOwner {

        IERC20(token).transfer(account, amount);
    }

    function addAccountLogs(address account, uint8 types, uint256 quantity, string memory desc) private {
        Log memory log = Log(types, block.timestamp, quantity, msg.sender, desc);
        accountLogs[account].push(log);
    }

    function claimTimeAxisReward() public {
        require(timeAxisReward[msg.sender] > 0, "No reward claim");
        uint256 reward = timeAxisReward[msg.sender];
        require(USDTToken.balanceOf(address(this)) >= reward, "Insufficient rewards");
        timeAxisReward[msg.sender] = 0;
        USDTToken.transfer(msg.sender, reward);
        addAccountLogs(msg.sender, 3, reward, "1");
        emit GetTimeAxisReard(msg.sender, reward);
    }

    function join(TYPES _typs) public {
        require(uint8(_typs) < 7, "Type error");
        address superior = IRelation(relShipAddress).getInviter(msg.sender);
        require(superior != address(0), "Please bind to the superior first");
        if(uint8(_typs) > 0) {
            uint8 preType = uint8(_typs) - 1;
            require(accountInfos[msg.sender][TYPES(preType)].length > 0, "Please participate in the front row first");
        }
        address relSuperior = superior;
        uint256 joinAmount = joinRequiredAmount[_typs];
        USERINFO[] storage accInfo = accountInfos[msg.sender][_typs];
        uint256 mintAmount;
        uint256 realIndex;
        if(accInfo.length <= 0) {
            mintAmount = joinAmount * mintMultiple;
            realIndex = 0;
        } else {
            require(checkTeam(msg.sender, _typs), "Incomplete");
            realIndex = accInfo.length;
        }
       
        USDTToken.transferFrom(msg.sender, address(this), joinAmount);
        USERINFO[] storage superiorInfo = accountInfos[superior][_typs];
        uint256 superLen = superiorInfo.length;
       
        if (superLen > 0 && superiorInfo[superLen.sub(1)].referrals.length < 2) {
            superiorInfo[superLen.sub(1)].referrals.push(msg.sender);
            referralsIndex[superiorInfo[superLen.sub(1)].oId][msg.sender] = realIndex;
        } else {
            address newSponsor = findNextAvailableSuperior(superior, _typs);
            USERINFO[] storage newSponsorInfo = accountInfos[newSponsor][_typs];
            superLen = newSponsorInfo.length;
            uint256 superIndex = superLen > 0 ? superLen.sub(1) : 0;
            newSponsorInfo[superIndex].referrals.push(msg.sender);
            referralsIndex[newSponsorInfo[superIndex].oId][msg.sender] = realIndex;
            superior = newSponsor;
        }
      
        address[] memory addr;
        accInfo.push(USERINFO(
            id,
            msg.sender,
            joinAmount,
            relSuperior,
            superior,
            addr,
            mintAmount,
            0,
            block.timestamp,
            block.timestamp
        ));
   
        id++;
        caculateInvest(msg.sender, superior, joinAmount, _typs, superLen);
    }

    function caculateInvest(address account, address superior, uint256 joinAmount, TYPES _typs, uint256 superLen) internal {
        ( 
            uint256 level1Amount,
            uint256 level2Amount,
            uint256 teamReward,
            uint256 sidewaysReward,
            uint256 fundAmount,
            uint256 timeAxisAmount
        ) = calculateDistributeAmount(joinAmount);
        if(superior != address(0)) {
            withdrawal(superior, level1Amount);
            addAccountLogs(superior, 1, level1Amount, "1");
        } else {
            USDTToken.transfer(fundAddress, level1Amount);
        }
        if(superLen > 0) {
            address level2Superior = accountInfos[superior][_typs][superLen.sub(1)].superior;
            if(level2Superior != address(0)) {
                withdrawal(level2Superior, level2Amount);
                addAccountLogs(level2Superior, 1, level2Amount, "2");
            } else {
                USDTToken.transfer(fundAddress, level2Amount);
            }
        } else {
            USDTToken.transfer(fundAddress, level2Amount);
        }
        
        //Achievement
        addAccountAchievement(account, joinAmount);
        uint256 totalGrantReward = differentialDivedent(account, joinAmount);
        if(teamReward > totalGrantReward) {
            USDTToken.transfer(fundAddress, teamReward.sub(totalGrantReward));
        }
        address ownerAccount = account;
        uint256 realSideways = sidewaysDistribute(ownerAccount, joinAmount);
        if(sidewaysReward > realSideways) {
            USDTToken.transfer(fundAddress, sidewaysReward.sub(realSideways));
        }
        
        USDTToken.transfer(fundAddress, fundAmount);
        //time axis
        uint256 totalBalance = timeAxisAmount;
        uint256 timeReward;
        if(timeAxisIndex[ownerAccount] <= 0) {
            uint256 totalSuperiors = timeAxisAccount.length > 100 ? 100 : timeAxisAccount.length;
            if(totalSuperiors > 0 && totalBalance > 0) {
                timeReward = totalBalance.div(totalSuperiors);
                for(uint256 i = timeAxisAccount.length; i > timeAxisAccount.length.sub(totalSuperiors);  i--) {
                    timeAxisReward[timeAxisAccount[i.sub(1)]] = timeAxisReward[timeAxisAccount[i.sub(1)]].add(timeReward);
                }
            }
            timeAxisAccount.push(ownerAccount);
            timeAxisIndex[ownerAccount] = timeAxisAccount.length;
        } else {
            uint256 accountIndex = timeAxisIndex[ownerAccount];
            uint256 beforeAccount = accountIndex > 100 ? 100 : accountIndex.sub(1);
            uint256 afterAccount = timeAxisAccount.length >= accountIndex.add(100) ? 100 : timeAxisAccount.length.sub(accountIndex);
            if(totalBalance > 0 && beforeAccount.add(afterAccount) > 0) {
                timeReward = totalBalance.div(beforeAccount.add(afterAccount));
                if(beforeAccount > 0) {
                    for(uint256 i = accountIndex.sub(1); i > accountIndex.sub(beforeAccount.add(1));  i--) {
                        timeAxisReward[timeAxisAccount[i.sub(1)]] = timeAxisReward[timeAxisAccount[i.sub(1)]].add(timeReward);
                    }
                }
                if(afterAccount > 0) {
                    for(uint256 j = accountIndex.sub(1); j < accountIndex.add(afterAccount).sub(1); j++) {
                        timeAxisReward[timeAxisAccount[j.add(1)]] = timeAxisReward[timeAxisAccount[j.add(1)]].add(timeReward);
                    }
                }
            } else {

            }
        }
    }

    function withdrawal(address account, uint256 amount) internal {
        uint256 withdrawFee = amount.mul(withdrawalRate).div(100);
        uint256 realWithdrawal = amount.sub(withdrawFee);
        USDTToken.transfer(fundAddress,withdrawFee );
        USDTToken.transfer(account, realWithdrawal);
        emit Widthdrawal(account, realWithdrawal);
    }

    function sidewaysDistribute(address account, uint256 amount) internal returns(uint256) {
        address superior = IRelation(relShipAddress).getInviter(account);
        uint256 accountLevel = getAccountGrade(superior);
        uint256 iniLoop = 0;
        uint256 effectLevel;
        uint256 realReward;
        superior = IRelation(relShipAddress).getInviter(superior);
        while(superior != address(0)) {
            uint256 superiorLevel = getAccountGrade(superior);
            if(superiorLevel == accountLevel) {
                uint256 reward = amount.mul(sidewaysRate).div(1000);
                withdrawal(superior, reward);
                addAccountLogs(superior, 2, reward, "8");
                realReward = realReward.add(reward);
                effectLevel++;
            }
            if(effectLevel >= 2) {
                break;
            }
            iniLoop++;
            if(iniLoop >= layer) {
                break;
            }
            superior = IRelation(relShipAddress).getInviter(superior);
        }
        return realReward;
    }

    function getAccountInfos(address account, TYPES _typs) public view returns(USERINFO[] memory) {
        USERINFO[] memory accountInfo = accountInfos[account][_typs];
        return accountInfo;
    }

    function checkTeam(address account, TYPES _typs) public view returns(bool) {
        USERINFO[] memory accountInfo = accountInfos[account][_typs];
        uint256 accountLen = accountInfo.length;
        if(accountLen <= 0) {
            return false;
        }
        uint256 times = accountInfo[accountLen.sub(1)].referrals.length;
        for (uint i = 0; i < accountInfo[accountLen.sub(1)].referrals.length; i++) {
            address refers = accountInfo[accountLen.sub(1)].referrals[i];
            uint256 index = referralsIndex[accountInfo[accountLen.sub(1)].oId][refers];
            times = times.add(accountInfos[refers][_typs][index].referrals.length);
        }
        if(times == 6) {
            return true;
        }
        return false;
    }

    function findNextAvailableSuperior(address parent, TYPES _types) internal view returns (address) {
        if(parent ==  topAddress) {
            return topAddress;
        }
        // (,uint256 index) = getAccountLenAndIndex(parent, _types);
        USERINFO[] memory accountInfo = accountInfos[parent][_types];
        uint256 accountLen = accountInfo.length;
        if(accountLen <= 0) {
            //
            address relSuperior = IRelation(relShipAddress).getInviter(parent);
            if(relSuperior == topAddress) {
                return topAddress;
            }
            return findNextAvailableSuperior(relSuperior, _types);
        }
        if (accountInfo[accountLen.sub(1)].referrals.length > 0) {
            for (uint i = 0; i < accountInfo[accountLen.sub(1)].referrals.length; i++) {
                address referral = accountInfo[accountLen.sub(1)].referrals[i];
                uint256 rIndex = referralsIndex[accountInfo[accountLen.sub(1)].oId][referral];
                if (accountInfos[referral][_types][rIndex].referrals.length < 2) {
                    return referral;
                }
            }
        }
        return findNextAvailableSuperior(accountInfo[accountLen.sub(1)].superior, _types);
    }
    

    function calculateDistributeAmount(uint256 amount) 
    internal 
    view
    returns(
        uint256 level1Amount,
        uint256 level2Amount,
        uint256 teamReward,
        uint256 sidewaysReward,
        uint256 fundAmount,
        uint256 timeAxisAmount
    ) {
        level1Amount = amount.mul(distributeRate[0]).div(1000);
        level2Amount = amount.mul(distributeRate[1]).div(1000);
        teamReward = amount.mul(distributeRate[2]).div(1000);
        sidewaysReward = amount.mul(distributeRate[3]).div(1000);
        fundAmount = amount.mul(distributeRate[4]).div(1000);
        timeAxisAmount = amount.mul(distributeRate[5]).div(1000);
    }

    function addAccountAchievement(address account, uint256 amount) internal {
        accountAchievement[account] = accountAchievement[account].add(amount);
        achievement(account, amount);
    }

    function achievement(address account, uint256 amount) private {
        teamAchievement[account] = teamAchievement[account].add(amount);
        address superior = IRelation(relShipAddress).getInviter(account);
        uint256 curLoop = 0;
        while(superior != address(0)) {
            if (accountAchievement[superior] > 0) {
                teamAchievement[superior] = teamAchievement[superior].add(amount);
            }
            superior = IRelation(relShipAddress).getInviter(superior);
            curLoop++;
            if(curLoop >= layer) {
                break;
            }
        }
    }

    function differentialDivedent(address account, uint256 amount) private returns(uint256) {
        uint256 totalRatio;
        uint256 totalRewardAmount;
        uint256 dloop = 0;
        address superior = IRelation(relShipAddress).getInviter(account);
        while(superior != address(0)) {
            uint256 rewardMaticAmount = 0;
            uint256 accountLevel = getAccountGrade(superior);
            uint256 currAccountAchievement = accountAchievement[superior];
            string memory typeLevel;
            if(accountLevel >= 7 && level7Ratio > totalRatio && currAccountAchievement > 0) {
                rewardMaticAmount = amount.mul(level7Ratio.sub(totalRatio)).div(100);
                totalRatio = totalRatio.add(level7Ratio.sub(totalRatio));
                typeLevel = "7";
            } else if(accountLevel >= 6 && level6Ratio > totalRatio && currAccountAchievement > 0) {
                rewardMaticAmount = amount.mul(level6Ratio.sub(totalRatio)).div(100);
                totalRatio = totalRatio.add(level6Ratio.sub(totalRatio));
                 typeLevel = "6";
            } else if(accountLevel >= 5 && level5Ratio > totalRatio && currAccountAchievement > 0) {
                rewardMaticAmount = amount.mul(level5Ratio.sub(totalRatio)).div(100);
                totalRatio = totalRatio.add(level5Ratio.sub(totalRatio));
                 typeLevel = "5";
            } else if(accountLevel >= 4 && level4Ratio > totalRatio && currAccountAchievement > 0) {
                rewardMaticAmount = amount.mul(level4Ratio.sub(totalRatio)).div(100);
                totalRatio = totalRatio.add(level4Ratio.sub(totalRatio));
                 typeLevel = "4";
            } else if(accountLevel >= 3 && level3Ratio > totalRatio && currAccountAchievement > 0) {
                rewardMaticAmount = amount.mul(level3Ratio.sub(totalRatio)).div(100);
                totalRatio = totalRatio.add(level3Ratio.sub(totalRatio));
                 typeLevel = "3";
            } else if(accountLevel >= 2 && level2Ratio > totalRatio && currAccountAchievement > 0) {
                rewardMaticAmount = amount.mul(level2Ratio.sub(totalRatio)).div(100);
                totalRatio = totalRatio.add(level2Ratio.sub(totalRatio));
                typeLevel = "2";
            }
            if(rewardMaticAmount > 0) {
                withdrawal(superior, rewardMaticAmount);
                addAccountLogs(superior, 2, rewardMaticAmount, typeLevel);
                totalRewardAmount = totalRewardAmount.add(rewardMaticAmount);
            }
            dloop++;
            if(totalRatio >= totalLevelRatio || dloop >= layer) {
                break;
            }
            superior = IRelation(relShipAddress).getInviter(superior); 
        }
        return totalRewardAmount;
    }

    function claimMintReward(TYPES _types) public {
        uint256 totalMint;
        USERINFO[] storage accInfo = accountInfos[msg.sender][_types];
        require(accInfo.length >= 1, "Insufficient conditions");
        uint256 currentTime;
        if (accInfo.length == 1) {
            currentTime = block.timestamp;
        } else {
            currentTime = accInfo[1].startTime;
        }
        if(accInfo[0].mintAmount > 0 && accInfo[0].mintAmount > accInfo[0].mintPaidAmount) {
            uint256 temEarn = currentTime.sub(accInfo[0].lastUpdateMintTime).mul(accInfo[0].mintAmount.div(mintPeriod));
            if(accInfo[0].mintPaidAmount.add(temEarn) > accInfo[0].mintAmount) {
                temEarn = accInfo[0].mintAmount.sub(accInfo[0].mintPaidAmount);
            }
            accInfo[0].mintPaidAmount = accInfo[0].mintPaidAmount.add(temEarn);
            totalMint = totalMint.add(temEarn);
        }
        accInfo[0].lastUpdateMintTime = currentTime;
        if(totalMint > 0) {
            AToken.transfer(msg.sender, totalMint);
            addAccountLogs(msg.sender, 3, totalMint, "2");
        }
        emit ClaimMintReward(msg.sender, totalMint);
    }

    //==================== view ================================
    function getReferrals(
        address sponsor,
        TYPES _types,
        uint256 index
    ) external view returns (USERINFO[] memory) {
        USERINFO[] memory accInfo = accountInfos[sponsor][_types];
        if(accInfo.length <= 0) return new USERINFO[](0);
        uint count = accInfo[index].referrals.length;
        USERINFO[] memory res = new USERINFO[](count);
        for (uint i = 0; i < count; i++) {
            address referral = accInfo[index].referrals[i];
            uint256 rIndex = referralsIndex[accInfo[index].oId][referral];
            res[i] = accountInfos[referral][_types][rIndex];
        }
        return res;
    }

    function getMintByItem(address account, TYPES _types) public view returns(USERINFO memory _accInfo) {
        USERINFO[] memory accInfo = accountInfos[account][_types];
        if(accInfo.length > 0) {
            _accInfo = accInfo[0];
        }
    }

    function getMintByItemEarn(address account, TYPES _types) public view returns(uint256) {
        USERINFO[] memory accInfo = accountInfos[account][_types];
        if(accInfo.length <= 0) {
            return 0;
        }
        uint256 currentTime;
        if(accInfo.length == 1) {
            currentTime = block.timestamp;
        } else {
            currentTime = accInfo[1].startTime;
        }
        if(accInfo[0].mintAmount > 0 && accInfo[0].mintAmount > accInfo[0].mintPaidAmount) {
            uint256 temEarn = currentTime.sub(accInfo[0].lastUpdateMintTime).mul(accInfo[0].mintAmount.div(mintPeriod));
            return temEarn;
        }
        return 0;
    }

    function getAchievementInfo(address account) public view returns(uint256 _largeDistrict, uint256 _totalSmallDistrict) {
        address[] memory team = IRelation(relShipAddress).getMyTeam(account);
        uint256[] memory temArr = new uint256[](team.length);
        uint256 _samllDistrict;
        uint256 _totalDistrict;
        for(uint256 i = 0; i < team.length; i++) {
            temArr[i] = teamAchievement[team[i]];
            _totalDistrict = _totalDistrict.add(temArr[i]);
            if(temArr[i] > _samllDistrict) {
                _samllDistrict = temArr[i];
            }
            if(temArr[i] > _largeDistrict) {
                _samllDistrict = _largeDistrict;
                _largeDistrict = temArr[i];
            }
        }
        _totalSmallDistrict = _totalDistrict.sub(_largeDistrict);
    }

    function getAccountGrade(address account) public view returns(uint8) {
        (,uint256 _totalSmallDistrict) = getAchievementInfo(account);
        address[] memory team = IRelation(relShipAddress).getMyTeam(account);
        uint256 effective = 0;
        if (team.length > 0) {
            for(uint256 i = 0; i < team.length; i++) {
                address lower = team[i];
                if(accountAchievement[lower] > 0) {
                    effective++;
                }
            }
        }
        if(_totalSmallDistrict >= level7RequiredAmount || levelInit[7][account]) {
            return 7;
        } else if(_totalSmallDistrict >= level6RequiredAmount || levelInit[6][account]) { 
            return 6;
        } else if(_totalSmallDistrict >= level5RequiredAmount || levelInit[5][account]) {
            return 5;
        } else if(_totalSmallDistrict >= level4RequiredAmount || levelInit[4][account]) {
            return 4;
        } else if(teamAchievement[account] >= level3RequiredAmount || levelInit[3][account]) {
            return 3;
        } else if(effective >= level2RequiredInviter || levelInit[2][account]) {
            return 2;
        } else { 
            return 1;
        }
   }

   function getAccountLogs(address account, uint256 quantity) public view returns(Log[] memory logList) {
        uint256 arrItem  = accountLogs[account].length > quantity ? quantity : accountLogs[account].length;
        logList = new Log[](arrItem);
        uint256 floor = accountLogs[account].length.sub(arrItem);
        uint256 index = 0;
        for(uint256 i = floor; i < accountLogs[account].length; i++) {
            logList[index] = accountLogs[account][i];
            index++;
        }
    }
}
